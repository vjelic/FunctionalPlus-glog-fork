{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-73a8cec5-ebe8-4973-a1b0-71426543bd37",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C++ programming, using weak or non-cryptographic random number generators can lead to vulnerabilities, especially in security-sensitive applications. Functions like `rand()` from the C standard library are not suitable for cryptographic purposes because they produce predictable sequences of numbers. This predictability can be exploited by attackers to compromise the security of the application.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, the `<random>` library provides better alternatives, but for cryptographic purposes, consider using libraries like OpenSSL or libsodium that offer cryptographically secure random number generation.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <cstdlib> // For rand()\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_shuffle(vec.begin(), vec.end());\n}\n```\n\n#### Fixed Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <random> // For std::random_device and std::mt19937\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_device rd;\n    std::mt19937 g(rd());\n    std::shuffle(vec.begin(), vec.end(), g);\n}\n```\n\n### Library Dependencies\n\n- `<algorithm>`: Required for `std::shuffle`.\n- `<vector>`: Required for using `std::vector`.\n- `<random>`: Required for `std::random_device` and `std::mt19937`.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-c459bd97-a108-461e-9b4b-42215cfe729b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C++ programming, using weak or non-cryptographic random number generators can lead to vulnerabilities, especially in security-sensitive applications. Functions like `rand()` from the C standard library are not suitable for cryptographic purposes because they produce predictable sequences of numbers. This predictability can be exploited by attackers to compromise the security of the application.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, the `<random>` library provides better alternatives, but for cryptographic purposes, consider using libraries like OpenSSL or libsodium that offer cryptographically secure random number generation.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <cstdlib> // For rand()\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_shuffle(vec.begin(), vec.end());\n}\n```\n\n#### Fixed Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <random> // For std::random_device and std::mt19937\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_device rd;\n    std::mt19937 g(rd());\n    std::shuffle(vec.begin(), vec.end(), g);\n}\n```\n\n### Library Dependencies\n\n- `<algorithm>`: Required for `std::shuffle`.\n- `<vector>`: Required for using `std::vector`.\n- `<random>`: Required for `std::random_device` and `std::mt19937`.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-897d2008-b565-4a80-bed0-64d0d15650c8",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C++ programming, using weak or non-cryptographic random number generators can lead to vulnerabilities, especially in security-sensitive applications. Functions like `rand()` from the C standard library are not suitable for cryptographic purposes because they produce predictable sequences of numbers. This predictability can be exploited by attackers to compromise the security of the application.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, the `<random>` library provides better alternatives, but for cryptographic purposes, consider using libraries like OpenSSL or libsodium that offer cryptographically secure random number generation.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <cstdlib> // For rand()\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_shuffle(vec.begin(), vec.end());\n}\n```\n\n#### Fixed Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <random> // For std::random_device and std::mt19937\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_device rd;\n    std::mt19937 g(rd());\n    std::shuffle(vec.begin(), vec.end(), g);\n}\n```\n\n### Library Dependencies\n\n- `<algorithm>`: Required for `std::shuffle`.\n- `<vector>`: Required for using `std::vector`.\n- `<random>`: Required for `std::random_device` and `std::mt19937`.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-d4499897-92f5-413a-98c9-1aaa0c40428e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C++ programming, using weak or non-cryptographic random number generators can lead to vulnerabilities, especially in security-sensitive applications. Functions like `rand()` from the C standard library are not suitable for cryptographic purposes because they produce predictable sequences of numbers. This predictability can be exploited by attackers to compromise the security of the application.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, the `<random>` library provides better alternatives, but for cryptographic purposes, consider using libraries like OpenSSL or libsodium that offer cryptographically secure random number generation.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <cstdlib> // For rand()\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_shuffle(vec.begin(), vec.end());\n}\n```\n\n#### Fixed Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <random> // For std::random_device and std::mt19937\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_device rd;\n    std::mt19937 g(rd());\n    std::shuffle(vec.begin(), vec.end(), g);\n}\n```\n\n### Library Dependencies\n\n- `<algorithm>`: Required for `std::shuffle`.\n- `<vector>`: Required for using `std::vector`.\n- `<random>`: Required for `std::random_device` and `std::mt19937`.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-19cf6272-d672-4210-adde-5f54f5ee6a3b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C++ programming, using weak or non-cryptographic random number generators can lead to vulnerabilities, especially in security-sensitive applications. Functions like `rand()` from the C standard library are not suitable for cryptographic purposes because they produce predictable sequences of numbers. This predictability can be exploited by attackers to compromise the security of the application.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, the `<random>` library provides better alternatives, but for cryptographic purposes, consider using libraries like OpenSSL or libsodium that offer cryptographically secure random number generation.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <cstdlib> // For rand()\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_shuffle(vec.begin(), vec.end());\n}\n```\n\n#### Fixed Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <random> // For std::random_device and std::mt19937\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_device rd;\n    std::mt19937 g(rd());\n    std::shuffle(vec.begin(), vec.end(), g);\n}\n```\n\n### Library Dependencies\n\n- `<algorithm>`: Required for `std::shuffle`.\n- `<vector>`: Required for using `std::vector`.\n- `<random>`: Required for `std::random_device` and `std::mt19937`.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-b41a7056-a26f-44cd-be5c-32bd002fdb67",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C++ programming, using weak or non-cryptographic random number generators can lead to vulnerabilities, especially in security-sensitive applications. Functions like `rand()` from the C standard library are not suitable for cryptographic purposes because they produce predictable sequences of numbers. This predictability can be exploited by attackers to compromise the security of the application.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, the `<random>` library provides better alternatives, but for cryptographic purposes, consider using libraries like OpenSSL or libsodium that offer cryptographically secure random number generation.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <cstdlib> // For rand()\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_shuffle(vec.begin(), vec.end());\n}\n```\n\n#### Fixed Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <random> // For std::random_device and std::mt19937\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_device rd;\n    std::mt19937 g(rd());\n    std::shuffle(vec.begin(), vec.end(), g);\n}\n```\n\n### Library Dependencies\n\n- `<algorithm>`: Required for `std::shuffle`.\n- `<vector>`: Required for using `std::vector`.\n- `<random>`: Required for `std::random_device` and `std::mt19937`.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-0537a751-d514-4f49-93ed-838a0d2a6d40",
              "help": {
                "text": "",
                "markdown": "## Description\n\nUnsecured URL Vulnerability in C++ programming language refers to the situation where a program does not validate or incorrectly validates an input that can affect the control flow or data flow of a program. In this case, the input is a URL. If the URL is not validated properly, it can lead to various security vulnerabilities such as injection attacks, cross-site scripting (XSS), and remote file inclusion (RFI).\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to validate all URLs before using them. This can be done by using regular expressions to check if the URL is in the correct format. Additionally, it is also recommended to use secure protocols such as HTTPS instead of HTTP.\n\n## Source Code Fix Recommendation\n\nHere is a simple example of how to validate a URL using regular expressions in C++:\n\n```cpp\n#include <regex>\n#include <string>\n\nbool isValidURL(const std::string& url)\n{\n    std::regex url_regex(\n        R\"(^https://([a-z]+\\.)?[a-z]+\\.[a-z]+(/.*)?$)\",\n        std::regex::icase\n    );\n    return std::regex_match(url, url_regex);\n}\n```\n\nIn this example, the `isValidURL` function checks if the input URL starts with \"https://\", followed by an optional subdomain (consisting of lowercase letters), a domain name (consisting of lowercase letters), a domain extension (consisting of lowercase letters), and an optional path. The function returns `true` if the URL matches this pattern and `false` otherwise.\n\n## Library Dependencies\n\nThe above code example requires the following library dependencies:\n\n- `<regex>`: for regular expressions\n- `<string>`: for string manipulation\n\n## OWASP Resources\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n- [OWASP Input Validation Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-346: Origin Validation Error](https://cwe.mitre.org/data/definitions/346.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-dde9d379-9d4d-4119-b8bb-d1d23215c006",
              "help": {
                "text": "",
                "markdown": "## Description\n\nUnsecured URL Vulnerability in C++ programming language refers to the situation where a program does not validate or incorrectly validates an input that can affect the control flow or data flow of a program. In this case, the input is a URL. If the URL is not validated properly, it can lead to various security vulnerabilities such as injection attacks, cross-site scripting (XSS), and remote file inclusion (RFI).\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to validate all URLs before using them. This can be done by using regular expressions to check if the URL is in the correct format. Additionally, it is also recommended to use secure protocols such as HTTPS instead of HTTP.\n\n## Source Code Fix Recommendation\n\nHere is a simple example of how to validate a URL using regular expressions in C++:\n\n```cpp\n#include <regex>\n#include <string>\n\nbool isValidURL(const std::string& url)\n{\n    std::regex url_regex(\n        R\"(^https://([a-z]+\\.)?[a-z]+\\.[a-z]+(/.*)?$)\",\n        std::regex::icase\n    );\n    return std::regex_match(url, url_regex);\n}\n```\n\nIn this example, the `isValidURL` function checks if the input URL starts with \"https://\", followed by an optional subdomain (consisting of lowercase letters), a domain name (consisting of lowercase letters), a domain extension (consisting of lowercase letters), and an optional path. The function returns `true` if the URL matches this pattern and `false` otherwise.\n\n## Library Dependencies\n\nThe above code example requires the following library dependencies:\n\n- `<regex>`: for regular expressions\n- `<string>`: for string manipulation\n\n## OWASP Resources\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n- [OWASP Input Validation Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-346: Origin Validation Error](https://cwe.mitre.org/data/definitions/346.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-5174e806-5218-440a-9ef9-100e5cd8bbd3",
              "help": {
                "text": "",
                "markdown": "## Description\n\nUnsecured URL Vulnerability in C++ programming language refers to the situation where a program does not validate or incorrectly validates an input that can affect the control flow or data flow of a program. In this case, the input is a URL. If the URL is not validated properly, it can lead to various security vulnerabilities such as injection attacks, cross-site scripting (XSS), and remote file inclusion (RFI).\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to validate all URLs before using them. This can be done by using regular expressions to check if the URL is in the correct format. Additionally, it is also recommended to use secure protocols such as HTTPS instead of HTTP.\n\n## Source Code Fix Recommendation\n\nHere is a simple example of how to validate a URL using regular expressions in C++:\n\n```cpp\n#include <regex>\n#include <string>\n\nbool isValidURL(const std::string& url)\n{\n    std::regex url_regex(\n        R\"(^https://([a-z]+\\.)?[a-z]+\\.[a-z]+(/.*)?$)\",\n        std::regex::icase\n    );\n    return std::regex_match(url, url_regex);\n}\n```\n\nIn this example, the `isValidURL` function checks if the input URL starts with \"https://\", followed by an optional subdomain (consisting of lowercase letters), a domain name (consisting of lowercase letters), a domain extension (consisting of lowercase letters), and an optional path. The function returns `true` if the URL matches this pattern and `false` otherwise.\n\n## Library Dependencies\n\nThe above code example requires the following library dependencies:\n\n- `<regex>`: for regular expressions\n- `<string>`: for string manipulation\n\n## OWASP Resources\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n- [OWASP Input Validation Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-346: Origin Validation Error](https://cwe.mitre.org/data/definitions/346.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-09073234-f2e5-4d4a-98ab-e15dba9ef855",
              "help": {
                "text": "",
                "markdown": "## Description\n\nUnsecured URL Vulnerability in C++ programming language refers to the situation where a program does not validate or incorrectly validates an input that can affect the control flow or data flow of a program. In this case, the input is a URL. If the URL is not validated properly, it can lead to various security vulnerabilities such as injection attacks, cross-site scripting (XSS), and remote file inclusion (RFI).\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to validate all URLs before using them. This can be done by using regular expressions to check if the URL is in the correct format. Additionally, it is also recommended to use secure protocols such as HTTPS instead of HTTP.\n\n## Source Code Fix Recommendation\n\nHere is a simple example of how to validate a URL using regular expressions in C++:\n\n```cpp\n#include <regex>\n#include <string>\n\nbool isValidURL(const std::string& url)\n{\n    std::regex url_regex(\n        R\"(^https://([a-z]+\\.)?[a-z]+\\.[a-z]+(/.*)?$)\",\n        std::regex::icase\n    );\n    return std::regex_match(url, url_regex);\n}\n```\n\nIn this example, the `isValidURL` function checks if the input URL starts with \"https://\", followed by an optional subdomain (consisting of lowercase letters), a domain name (consisting of lowercase letters), a domain extension (consisting of lowercase letters), and an optional path. The function returns `true` if the URL matches this pattern and `false` otherwise.\n\n## Library Dependencies\n\nThe above code example requires the following library dependencies:\n\n- `<regex>`: for regular expressions\n- `<string>`: for string manipulation\n\n## OWASP Resources\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n- [OWASP Input Validation Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-346: Origin Validation Error](https://cwe.mitre.org/data/definitions/346.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-963cb1fd-db9d-455b-9dda-2af2effe064c",
              "help": {
                "text": "",
                "markdown": "## Description\n\nUnsecured URL Vulnerability in C++ programming language refers to the situation where a program does not validate or incorrectly validates an input that can affect the control flow or data flow of a program. In this case, the input is a URL. If the URL is not validated properly, it can lead to various security vulnerabilities such as injection attacks, cross-site scripting (XSS), and remote file inclusion (RFI).\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to validate all URLs before using them. This can be done by using regular expressions to check if the URL is in the correct format. Additionally, it is also recommended to use secure protocols such as HTTPS instead of HTTP.\n\n## Source Code Fix Recommendation\n\nHere is a simple example of how to validate a URL using regular expressions in C++:\n\n```cpp\n#include <regex>\n#include <string>\n\nbool isValidURL(const std::string& url)\n{\n    std::regex url_regex(\n        R\"(^https://([a-z]+\\.)?[a-z]+\\.[a-z]+(/.*)?$)\",\n        std::regex::icase\n    );\n    return std::regex_match(url, url_regex);\n}\n```\n\nIn this example, the `isValidURL` function checks if the input URL starts with \"https://\", followed by an optional subdomain (consisting of lowercase letters), a domain name (consisting of lowercase letters), a domain extension (consisting of lowercase letters), and an optional path. The function returns `true` if the URL matches this pattern and `false` otherwise.\n\n## Library Dependencies\n\nThe above code example requires the following library dependencies:\n\n- `<regex>`: for regular expressions\n- `<string>`: for string manipulation\n\n## OWASP Resources\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n- [OWASP Input Validation Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-346: Origin Validation Error](https://cwe.mitre.org/data/definitions/346.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-14065740-10af-479b-b877-d1f19b4fd220",
              "help": {
                "text": "",
                "markdown": "## Description\n\nUnsecured URL Vulnerability in C++ programming language refers to the situation where a program does not validate or incorrectly validates an input that can affect the control flow or data flow of a program. In this case, the input is a URL. If the URL is not validated properly, it can lead to various security vulnerabilities such as injection attacks, cross-site scripting (XSS), and remote file inclusion (RFI).\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to validate all URLs before using them. This can be done by using regular expressions to check if the URL is in the correct format. Additionally, it is also recommended to use secure protocols such as HTTPS instead of HTTP.\n\n## Source Code Fix Recommendation\n\nHere is a simple example of how to validate a URL using regular expressions in C++:\n\n```cpp\n#include <regex>\n#include <string>\n\nbool isValidURL(const std::string& url)\n{\n    std::regex url_regex(\n        R\"(^https://([a-z]+\\.)?[a-z]+\\.[a-z]+(/.*)?$)\",\n        std::regex::icase\n    );\n    return std::regex_match(url, url_regex);\n}\n```\n\nIn this example, the `isValidURL` function checks if the input URL starts with \"https://\", followed by an optional subdomain (consisting of lowercase letters), a domain name (consisting of lowercase letters), a domain extension (consisting of lowercase letters), and an optional path. The function returns `true` if the URL matches this pattern and `false` otherwise.\n\n## Library Dependencies\n\nThe above code example requires the following library dependencies:\n\n- `<regex>`: for regular expressions\n- `<string>`: for string manipulation\n\n## OWASP Resources\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n- [OWASP Input Validation Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-346: Origin Validation Error](https://cwe.mitre.org/data/definitions/346.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-c0f59f8b-168a-4e69-a3d3-92bfc3cd9931",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C++ programming, using weak or non-cryptographic random number generators can lead to vulnerabilities, especially in security-sensitive applications. Functions like `rand()` from the C standard library are not suitable for cryptographic purposes because they produce predictable sequences of numbers. This predictability can be exploited by attackers to compromise the security of the application.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, the `<random>` library provides better alternatives, but for cryptographic purposes, consider using libraries like OpenSSL or libsodium that offer cryptographically secure random number generation.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <cstdlib> // For rand()\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_shuffle(vec.begin(), vec.end());\n}\n```\n\n#### Fixed Code\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <random> // For std::random_device and std::mt19937\n\nvoid shuffleVector(std::vector<int>& vec) {\n    std::random_device rd;\n    std::mt19937 g(rd());\n    std::shuffle(vec.begin(), vec.end(), g);\n}\n```\n\n### Library Dependencies\n\n- `<algorithm>`: Required for `std::shuffle`.\n- `<vector>`: Required for using `std::vector`.\n- `<random>`: Required for `std::random_device` and `std::mt19937`.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-e0ed760d-6516-42d4-a34c-247ced437e18",
              "help": {
                "text": "",
                "markdown": "## Description\n\nUnsecured URL Vulnerability in C++ programming language refers to the situation where a program does not validate or incorrectly validates an input that can affect the control flow or data flow of a program. In this case, the input is a URL. If the URL is not validated properly, it can lead to various security vulnerabilities such as injection attacks, cross-site scripting (XSS), and remote file inclusion (RFI).\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to validate all URLs before using them. This can be done by using regular expressions to check if the URL is in the correct format. Additionally, it is also recommended to use secure protocols such as HTTPS instead of HTTP.\n\n## Source Code Fix Recommendation\n\nHere is a simple example of how to validate a URL using regular expressions in C++:\n\n```cpp\n#include <regex>\n#include <string>\n\nbool isValidURL(const std::string& url)\n{\n    std::regex url_regex(\n        R\"(^https://([a-z]+\\.)?[a-z]+\\.[a-z]+(/.*)?$)\",\n        std::regex::icase\n    );\n    return std::regex_match(url, url_regex);\n}\n```\n\nIn this example, the `isValidURL` function checks if the input URL starts with \"https://\", followed by an optional subdomain (consisting of lowercase letters), a domain name (consisting of lowercase letters), a domain extension (consisting of lowercase letters), and an optional path. The function returns `true` if the URL matches this pattern and `false` otherwise.\n\n## Library Dependencies\n\nThe above code example requires the following library dependencies:\n\n- `<regex>`: for regular expressions\n- `<string>`: for string manipulation\n\n## OWASP Resources\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n- [OWASP Input Validation Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-346: Origin Validation Error](https://cwe.mitre.org/data/definitions/346.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-c59c6c21-1353-4a2e-a26a-5a3bdd66b5d9",
              "help": {
                "text": "",
                "markdown": "## Description\n\nUnsecured URL Vulnerability in C++ programming language refers to the situation where a program does not validate or incorrectly validates an input that can affect the control flow or data flow of a program. In this case, the input is a URL. If the URL is not validated properly, it can lead to various security vulnerabilities such as injection attacks, cross-site scripting (XSS), and remote file inclusion (RFI).\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to validate all URLs before using them. This can be done by using regular expressions to check if the URL is in the correct format. Additionally, it is also recommended to use secure protocols such as HTTPS instead of HTTP.\n\n## Source Code Fix Recommendation\n\nHere is a simple example of how to validate a URL using regular expressions in C++:\n\n```cpp\n#include <regex>\n#include <string>\n\nbool isValidURL(const std::string& url)\n{\n    std::regex url_regex(\n        R\"(^https://([a-z]+\\.)?[a-z]+\\.[a-z]+(/.*)?$)\",\n        std::regex::icase\n    );\n    return std::regex_match(url, url_regex);\n}\n```\n\nIn this example, the `isValidURL` function checks if the input URL starts with \"https://\", followed by an optional subdomain (consisting of lowercase letters), a domain name (consisting of lowercase letters), a domain extension (consisting of lowercase letters), and an optional path. The function returns `true` if the URL matches this pattern and `false` otherwise.\n\n## Library Dependencies\n\nThe above code example requires the following library dependencies:\n\n- `<regex>`: for regular expressions\n- `<string>`: for string manipulation\n\n## OWASP Resources\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n- [OWASP Input Validation Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-346: Origin Validation Error](https://cwe.mitre.org/data/definitions/346.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-46c4f775-1bc9-48ca-80c8-f49aad72772f",
              "help": {
                "text": "",
                "markdown": "## Description\n\nUnsecured URL Vulnerability in C++ programming language refers to the situation where a program does not validate or incorrectly validates an input that can affect the control flow or data flow of a program. In this case, the input is a URL. If the URL is not validated properly, it can lead to various security vulnerabilities such as injection attacks, cross-site scripting (XSS), and remote file inclusion (RFI).\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to validate all URLs before using them. This can be done by using regular expressions to check if the URL is in the correct format. Additionally, it is also recommended to use secure protocols such as HTTPS instead of HTTP.\n\n## Source Code Fix Recommendation\n\nHere is a simple example of how to validate a URL using regular expressions in C++:\n\n```cpp\n#include <regex>\n#include <string>\n\nbool isValidURL(const std::string& url)\n{\n    std::regex url_regex(\n        R\"(^https://([a-z]+\\.)?[a-z]+\\.[a-z]+(/.*)?$)\",\n        std::regex::icase\n    );\n    return std::regex_match(url, url_regex);\n}\n```\n\nIn this example, the `isValidURL` function checks if the input URL starts with \"https://\", followed by an optional subdomain (consisting of lowercase letters), a domain name (consisting of lowercase letters), a domain extension (consisting of lowercase letters), and an optional path. The function returns `true` if the URL matches this pattern and `false` otherwise.\n\n## Library Dependencies\n\nThe above code example requires the following library dependencies:\n\n- `<regex>`: for regular expressions\n- `<string>`: for string manipulation\n\n## OWASP Resources\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n- [OWASP Input Validation Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-346: Origin Validation Error](https://cwe.mitre.org/data/definitions/346.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-73a8cec5-ebe8-4973-a1b0-71426543bd37",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include_all_in_one/include/fplus/fplus.hpp"
                },
                "region": {
                  "startLine": 11234,
                  "startColumn": 29,
                  "endLine": 11234,
                  "endColumn": 37,
                  "charOffset": 388465,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-c459bd97-a108-461e-9b4b-42215cfe729b",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include_all_in_one/include/fplus/fplus.hpp"
                },
                "region": {
                  "startLine": 11217,
                  "startColumn": 5,
                  "endLine": 11217,
                  "endColumn": 13,
                  "charOffset": 387779,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-897d2008-b565-4a80-bed0-64d0d15650c8",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include_all_in_one/include/fplus/fplus.hpp"
                },
                "region": {
                  "startLine": 11219,
                  "startColumn": 22,
                  "endLine": 11219,
                  "endColumn": 30,
                  "charOffset": 387852,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-d4499897-92f5-413a-98c9-1aaa0c40428e",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include_all_in_one/include/fplus/fplus.hpp"
                },
                "region": {
                  "startLine": 11206,
                  "startColumn": 25,
                  "endLine": 11206,
                  "endColumn": 33,
                  "charOffset": 387424,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-19cf6272-d672-4210-adde-5f54f5ee6a3b",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include_all_in_one/include/fplus/fplus.hpp"
                },
                "region": {
                  "startLine": 11193,
                  "startColumn": 14,
                  "endLine": 11193,
                  "endColumn": 22,
                  "charOffset": 386994,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-b41a7056-a26f-44cd-be5c-32bd002fdb67",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include_all_in_one/include/fplus/fplus.hpp"
                },
                "region": {
                  "startLine": 11202,
                  "startColumn": 14,
                  "endLine": 11202,
                  "endColumn": 22,
                  "charOffset": 387270,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-0537a751-d514-4f49-93ed-838a0d2a6d40",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured URL Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include_all_in_one/include/fplus/fplus.hpp"
                },
                "region": {
                  "startLine": 10266,
                  "startColumn": 4,
                  "endLine": 10266,
                  "endColumn": 24,
                  "charOffset": 353274,
                  "charLength": 20,
                  "snippet": {
                    "text": "http://www.boost.org",
                    "rendered": {
                      "text": "http://www.boost.org",
                      "markdown": "`http://www.boost.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "include_all_in_one/include/fplus/fplus.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 353274,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "https://www.boost.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-dde9d379-9d4d-4119-b8bb-d1d23215c006",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured URL Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include_all_in_one/include/fplus/fplus.hpp"
                },
                "region": {
                  "startLine": 8711,
                  "startColumn": 4,
                  "endLine": 8711,
                  "endColumn": 24,
                  "charOffset": 297367,
                  "charLength": 20,
                  "snippet": {
                    "text": "http://www.boost.org",
                    "rendered": {
                      "text": "http://www.boost.org",
                      "markdown": "`http://www.boost.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "include_all_in_one/include/fplus/fplus.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 297367,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "https://www.boost.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-5174e806-5218-440a-9ef9-100e5cd8bbd3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured URL Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include_all_in_one/include/fplus/fplus.hpp"
                },
                "region": {
                  "startLine": 8497,
                  "startColumn": 4,
                  "endLine": 8497,
                  "endColumn": 24,
                  "charOffset": 289547,
                  "charLength": 20,
                  "snippet": {
                    "text": "http://www.boost.org",
                    "rendered": {
                      "text": "http://www.boost.org",
                      "markdown": "`http://www.boost.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "include_all_in_one/include/fplus/fplus.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 289547,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "https://www.boost.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-09073234-f2e5-4d4a-98ab-e15dba9ef855",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured URL Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include_all_in_one/include/fplus/fplus.hpp"
                },
                "region": {
                  "startLine": 6772,
                  "startColumn": 4,
                  "endLine": 6772,
                  "endColumn": 24,
                  "charOffset": 228907,
                  "charLength": 20,
                  "snippet": {
                    "text": "http://www.boost.org",
                    "rendered": {
                      "text": "http://www.boost.org",
                      "markdown": "`http://www.boost.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "include_all_in_one/include/fplus/fplus.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 228907,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "https://www.boost.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-963cb1fd-db9d-455b-9dda-2af2effe064c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured URL Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include_all_in_one/include/fplus/fplus.hpp"
                },
                "region": {
                  "startLine": 6748,
                  "startColumn": 4,
                  "endLine": 6748,
                  "endColumn": 24,
                  "charOffset": 228298,
                  "charLength": 20,
                  "snippet": {
                    "text": "http://www.boost.org",
                    "rendered": {
                      "text": "http://www.boost.org",
                      "markdown": "`http://www.boost.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "include_all_in_one/include/fplus/fplus.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 228298,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "https://www.boost.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-14065740-10af-479b-b877-d1f19b4fd220",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured URL Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include_all_in_one/include/fplus/fplus.hpp"
                },
                "region": {
                  "startLine": 10279,
                  "startColumn": 4,
                  "endLine": 10279,
                  "endColumn": 24,
                  "charOffset": 353580,
                  "charLength": 20,
                  "snippet": {
                    "text": "http://www.boost.org",
                    "rendered": {
                      "text": "http://www.boost.org",
                      "markdown": "`http://www.boost.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "include_all_in_one/include/fplus/fplus.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 353580,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "https://www.boost.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-c0f59f8b-168a-4e69-a3d3-92bfc3cd9931",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include_all_in_one/include/fplus/fplus.hpp"
                },
                "region": {
                  "startLine": 11197,
                  "startColumn": 13,
                  "endLine": 11197,
                  "endColumn": 21,
                  "charOffset": 387129,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-e0ed760d-6516-42d4-a34c-247ced437e18",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured URL Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include_all_in_one/include/fplus/fplus.hpp"
                },
                "region": {
                  "startLine": 6760,
                  "startColumn": 4,
                  "endLine": 6760,
                  "endColumn": 24,
                  "charOffset": 228594,
                  "charLength": 20,
                  "snippet": {
                    "text": "http://www.boost.org",
                    "rendered": {
                      "text": "http://www.boost.org",
                      "markdown": "`http://www.boost.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "include_all_in_one/include/fplus/fplus.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 228594,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "https://www.boost.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-c59c6c21-1353-4a2e-a26a-5a3bdd66b5d9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured URL Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include_all_in_one/include/fplus/fplus.hpp"
                },
                "region": {
                  "startLine": 6736,
                  "startColumn": 4,
                  "endLine": 6736,
                  "endColumn": 24,
                  "charOffset": 228000,
                  "charLength": 20,
                  "snippet": {
                    "text": "http://www.boost.org",
                    "rendered": {
                      "text": "http://www.boost.org",
                      "markdown": "`http://www.boost.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "include_all_in_one/include/fplus/fplus.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 228000,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "https://www.boost.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-46c4f775-1bc9-48ca-80c8-f49aad72772f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured URL Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/readme_perf_examples.cpp"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 4,
                  "endLine": 5,
                  "endColumn": 24,
                  "charOffset": 235,
                  "charLength": 20,
                  "snippet": {
                    "text": "http://www.boost.org",
                    "rendered": {
                      "text": "http://www.boost.org",
                      "markdown": "`http://www.boost.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/readme_perf_examples.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 235,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "https://www.boost.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}